=pod

=head1 NAME

HTML::Template::Compiled::Reference

=head1 TAGSTYLES

    <TMPL_IF var><TMPL_VAR foo></tmpl_if var>
    <!-- TMPL_IF var --><!-- TMPL_VAR foo --><!-- /tmpl_if var -->
    <%if var %><%= foo %><%/if var %>

=head1 TAGS

=over 4

=item VAR

    <%var foo%> or <%= foo%>

=item IF, IF_DEFINED, UNLESS, ELSIF, ELSE

conditions like in Perl

=item LOOP, WHILE

for-loop and while-loop like in Perl.

    <%loop cds%>Title: <%= _.title%><%/loop cds%>
    <%while resultset.next%><%= _.foo %><%/while %>

=item WITH

    <%with cds.0.artist.fanclub%><%= _.address%><%= _.homepage%><%/with %>

=item INCLUDE, INCLUDE_VAR

    <%include template.htc%>
    <%include_var param_with_template_name%>

=item COMMENT, VERBATIM, NOPARSE

    <%comment explanation %>
    This will not appear in the rendered template.
    blah blah...
    <%/comment explanation %>

=item SWITCH, CASE

    <%switch .config.language%>
    <%case de%>Hallo
    <%case es%>Hola
    <%case en,default%>Hello
    <%/switch .config.language%>

=back

=head1 ATTRIBUTES

Each attribute can be written as

    attribute=foo
    attribute="some thing"
    attribute='some "thing"'

=over 4

=item NAME

You can omit the C<'name='> here.

    <%if var%>var<%elsif name=var2%>var4<%/if%>

Can be used in all tags.

=item ESCAPE

    <%= message escape=html %>
    <%= params escape=url %>
    <%= some_var escape=dump|html%>

Can be used in C<VAR>-tags.

=item DEFAULT

    <%= this.var.might_be_undef default="my fault" %>

Can be used in C<VAR>-tags.

=item ALIAS

    <%loop cds alias="cd" %><%= cd.title %><%/loop cds %>

Can be used in C<LOOP> (and it's planned for C<WHILE>)

=back

=cut

